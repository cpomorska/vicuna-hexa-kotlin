plugins {
    id 'org.jetbrains.kotlin.jvm' version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.allopen" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.noarg" version "${kotlinVersion}"
    id 'io.quarkus'
//    id 'java'
//    id 'maven-publish'
    id 'jacoco'
}

repositories {
    mavenCentral()
    mavenLocal()
}


dependencies {
    implementation 'io.quarkus:quarkus-container-image-jib'
    implementation 'io.quarkus:quarkus-container-image-docker'
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:${lombokVersion}"

    /* Lombok */
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    implementation "net.bytebuddy:byte-buddy:${bytebuddyVersion}"

    /* Quarkus */
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation enforcedPlatform("${quarkusPlatformGroupId}:quarkus-camel-bom:${quarkusPlatformVersion}")
    implementation "io.quarkus:quarkus-openshift"
    implementation "io.quarkus:quarkus-hibernate-orm"
    implementation "io.quarkus:quarkus-kafka-client"
    implementation "io.quarkus:quarkus-resteasy-multipart"
    implementation "io.quarkus:quarkus-oidc"
    implementation "io.quarkus:quarkus-oidc-client"
    implementation "io.quarkus:quarkus-config-yaml"
    implementation "io.quarkus:quarkus-kubernetes"
    implementation "io.quarkus:quarkus-jdbc-postgresql"
    implementation "io.quarkus:quarkus-jdbc-h2"
    implementation "io.quarkus:quarkus-test-h2"
    implementation "io.quarkus:quarkus-liquibase"
    implementation "io.quarkus:quarkus-kotlin"
    //implementation "io.quarkus:quarkus-opentelemetry"
    implementation "io.quarkus:quarkus-jackson"
    implementation "io.quarkus:quarkus-resteasy-jackson"
    implementation "io.quarkus:quarkus-kafka-streams"
//    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "io.quarkus:quarkus-hibernate-orm-panache"
    implementation "io.quarkus:quarkus-arc"
    implementation "io.quarkus:quarkus-resteasy"
    //implementation "io.quarkus:quarkus-resteasy-reactive"
    //implementation "io.quarkus:quarkus-smallrye-openapi"
    implementation "io.quarkus:quarkus-messaging-kafka"

    /* Camel */
    implementation "org.apache.camel.quarkus:camel-quarkus-log"
    implementation "org.apache.camel.quarkus:camel-quarkus-kafka"
    implementation "org.apache.camel.quarkus:camel-quarkus-kotlin"
    implementation "org.apache.camel.quarkus:camel-quarkus-jta"
    implementation "org.apache.camel.quarkus:camel-quarkus-base64"
    implementation "org.apache.camel.quarkus:camel-quarkus-bean"
    implementation "org.apache.camel.quarkus:camel-quarkus-quartz"
    implementation "org.apache.camel.quarkus:camel-quarkus-jpa"
    implementation "org.apache.camel.quarkus:camel-quarkus-jaxb"
    implementation "org.apache.camel.quarkus:camel-quarkus-jackson"
    implementation "org.apache.camel.quarkus:camel-quarkus-direct"
    implementation "org.apache.camel.quarkus:camel-quarkus-mock:${quarkusCamelVersion}"
    implementation "org.apache.camel.quarkus:camel-quarkus-support-spring-beans:${quarkusCamelVersion}"
    implementation "org.apache.camel.quarkus:camel-quarkus-vertx-http:${quarkusCamelVersion}"
    implementation "org.apache.camel.quarkus:camel-quarkus-rest-openapi:${quarkusCamelVersion}"
    implementation "org.apache.camel.quarkus:camel-quarkus-openapi-java:${quarkusCamelVersion}"
    implementation "org.apache.camel.quarkus:camel-quarkus-xml-jaxb:${quarkusCamelVersion}"

    implementation "org.apache.camel.quarkus:camel-quarkus-microprofile-fault-tolerance"
    implementation "org.apache.camel.quarkus:camel-quarkus-junit5-extension-tests:${quarkusCamelVersion}"
    implementation "org.apache.camel.quarkus:camel-quarkus-integration-test-kotlin:${quarkusCamelIntegrationTestKotlinVersion}"
    implementation "org.apache.camel.quarkus:camel-quarkus-openapi-java:${quarkusCamelVersion}"
    //implementation "org.apache.camel.quarkus:camel-quarkus-amqp"
    implementation "org.apache.camel.quarkus:camel-quarkus-attachments"
    //implementation "io.quarkus:quarkus-keycloak-authorization"
    implementation "org.apache.camel.quarkus:camel-quarkus-seda"
    implementation "org.apache.camel.quarkus:camel-quarkus-zip-deflater"
    //implementation "org.apache.camel.quarkus:camel-quarkus-jms"
    implementation "org.apache.camel.quarkus:camel-quarkus-mail"

    /* Jackson */
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.19.+"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.19.2"
    implementation "jakarta.xml.bind:jakarta.xml.bind-api:${jakartaXmlBindApiVersion}"

    /* Test */
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:${lombokVersion}"
    testImplementation "com.github.dasniko:testcontainers-keycloak:${testcontainersKeycloakVersion}"
    testImplementation "net.bytebuddy:byte-buddy-agent:${bytebuddyVersion}"

    testImplementation "org.mockito:mockito-core:${mockitoCoreVersion}"
    testImplementation "org.mockito:mockito-inline:${mockitoInlineVersion}"
    testImplementation "org.mockito.kotlin:mockito-kotlin:${mockitoKotlinVersion}"
    testImplementation "org.assertj:assertj-core:${assertjVersion}"

    testImplementation "io.quarkus:quarkus-junit5"
    testImplementation "com.tngtech.archunit:archunit-junit5:${archunitVersion}"
    testImplementation "io.rest-assured:rest-assured"
    testImplementation "io.smallrye.reactive:smallrye-reactive-messaging-in-memory"

    testImplementation "io.quarkus:quarkus-test-oidc-server"
    testImplementation "io.quarkus:quarkus-test-keycloak-server"
}

group "com.scprojekt"
version "1.0.0-SNAPSHOT"

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}
allOpen {
    annotation("jakarta.ws.rs.Path")
    annotation("jakarta.enterprise.context.ApplicationScoped")
    annotation("io.quarkus.test.junit.QuarkusTest")
}

tasks {
    test {
        useJUnitPlatform()
        filter {
            exclude '**/*IT.class'
        }
        testLogging {
            events 'PASSED', 'FAILED', 'SKIPPED'
        }
        jacocoTestCoverageVerification.enabled = true
    }
}

tasks.register('integrationTest', Test) {
    useJUnitPlatform()
    filter {
        exclude '**/*Test.class'
    }
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
    jacocoTestCoverageVerification.enabled = true
}



jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
}


static def configureKotlinOptions(task) {
    task.kotlinOptions.jvmTarget = JavaVersion.VERSION_17
    task.kotlinOptions.javaParameters = true
}

compileKotlin {
    configureKotlinOptions(it)
}

compileTestKotlin {
    configureKotlinOptions(it)
}

